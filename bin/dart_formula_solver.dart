import 'package:big_decimal/big_decimal.dart';
import 'package:collection/collection.dart';

void main() {
  testAllFormulas();
  // testSingleFormula();
}

void testSingleFormula() {
  //final formula = "2+9*5/2-4*3*5";
  // final formula = "((-49/28/44/-39)-(47*-48)*15)";
  final formula = "((-32*0) / (-50 - -2)) + (22 - 48)";
  var result = Calculator().evaluateExpression(formula);
  print("\n result: $result");
}

void testAllFormulas() {
  getTestFormulas().forEachIndexed((index, pair) {
    var (formula, answer) = pair;
    var result = Calculator().evaluateExpression(formula);

    var resultDec = result.contains(".") ? result.split(".")[1] : "0";
    var answerDec = answer.contains(".") ? answer.split(".")[1] : "0";

    var minLen = (resultDec.length < answerDec.length
        ? resultDec.length
        : answerDec.length);
    minLen = minLen > 3 ? 3 : minLen;

    var dresult = result.split(".")[0] + "." + resultDec.substring(0, minLen);
    var danswer = answer.split(".")[0] + "." + answerDec.substring(0, minLen);

    print(
      "\n result: $dresult answer: $danswer  right? ${dresult == danswer} index $index formula: $formula",
    );
  });
}

class Calculator {
  /// Caso seja necessario alterar esse valor, nao esqueça de alterar tambem as expressoes
  /// regex e certifique-se de que o novo valor nao vá dar conflito com as expressoes.
  final _minusSafeOperator = "~";

  /// Verifica se uma string representa uma expressão matemática que ainda precisa
  /// ser calculada. Ela procura por um padrão de "operando OPERADOR operando".
  /// Enquanto essa expressão encontrar correspondências na fórmula, significa que ainda há cálculos pendentes.
  final resultCheckerRegex = RegExp(r'[-~0-9]+[-+*/][-~0-9]+');

  /// Obtem as expressões entre parênteses, de dentro pra fora.
  final parenthesesMatch = RegExp(r'\(([^()]+)\)');

  /// Regex para detectar operações de multiplicação e divisão.
  /// identifica e encapsula em grupos os operandos o operador.
  /// São dois padrões separados por um operador 'ou':
  /// - Se o primeiro padrão corresponder, os 3 primeiros grupos são preenchidos.
  /// - Se o segundo padrão corresponder, os 3 grupos seguintes são preenchidos.
  /// Uma função separada verifica quais grupos têm resultados e extrai operador e operandos.
  final timesAndDivRegex = RegExp(
    r'([.,\d~]+)(\*)([.,\d~]+)|([.,\d~]+)(/)([.,\d~]+)',
  );

  /// Atua da exata mesma maneira que `timesAndDivRegex`, mas com subtração e adição.
  final sumAndSubRegex = RegExp(
    r'([.,\d~]+)(\+)([.,\d~]+)|([.,\d~]+)(-)([.,\d~]+)',
  );

  /// Recebe uma formula e retorna um resultado.
  String evaluateExpression(String rawFormula) {
    String formula = prepareFormula(rawFormula);

    do {
      formula = resolveParentheses(formula);
    } while (resultCheckerRegex.hasMatch(formula));

    return formula.replaceAll(_minusSafeOperator, "-");
  }

  /// Prepara a fórmula para avaliação.
  ///
  /// Remove espaços e substitui operadores unários de menos (`-`)
  /// pelo `_minusSafeOperator` para evitar conflitos com a subtração.
  ///
  /// É necessário remover os espaços em branco antes de substituir os unários
  /// caso contrário ocorrem erros de identificação.
  ///
  /// A regex `[regexUnaryMinus]` identifica `-` unários que não são precedidos
  /// por dígito/parêntese de fechamento e são seguidos por dígito/parêntese de abertura.
  /// [f] é a string da fórmula bruta a ser transformada.
  ///
  /// Retorna a string da fórmula transformada, pronta para avaliação.
  String prepareFormula(String f) {
    final regexUnaryMinus = RegExp(r'(?<![\d)])-(?=\s*(?:\d|\())');
    var normalizedF = f.replaceAll(" ", "");

    return normalizedF.replaceAllMapped(
      regexUnaryMinus,
      (_) => _minusSafeOperator,
    );
  }

  /// Resolve expressões dentro de parênteses recursivamente.
  /// Identifica a primeira expressão entre parênteses, resolve-a chamando `solveAll`,
  /// e substitui a expressão original pelo resultado, continuando até não haver mais parênteses.
  /// Havendo parênteses aninhados, captura o par mais fundo na cadeia de expressões, e resolve de dentro pra fora.
  /// Caso não hajam parênteses, chama `solveAll` para resolver a expressão..
  String resolveParentheses(String formula) {
    print("processing:  $formula");

    final matches = parenthesesMatch.allMatches(formula);
    final match = matches.firstOrNull;

    if (match != null) {
      final result = resolveFormulaSteps(match.group(1)!);
      return updateFormula(match, result, formula);
    }
    return resolveFormulaSteps(formula);
  }

  String resolveFormulaSteps(String formula) {
    print("processing ():  $formula");

    final timesAndDivOperations = timesAndDivRegex.allMatches(formula);

    if (timesAndDivOperations.isNotEmpty) {
      var match = timesAndDivOperations.first;
      return evaluate(formula, match);
    }

    final sumAndSubOperations = sumAndSubRegex.allMatches(formula);

    if (sumAndSubOperations.isNotEmpty) {
      var match = sumAndSubOperations.first;
      return evaluate(formula, match);
    }

    return formula;
  }

  String updateFormula(RegExpMatch match, String result, String formula) {
    var beforeMatch = formula.substring(0, match.start);
    var afterMatch = formula.substring(match.end);
    return "$beforeMatch$result$afterMatch";
  }

  RegExpMatch? getMatch(String regexPattern, String formula) {
    final regex = RegExp(regexPattern);
    final matches = regex.allMatches(formula);
    final match = matches.firstOrNull;

    return match;
  }

  String evaluateFraction(double v1, String op, double v2) {
    final val1 = BigDecimal.parse("$v1");
    final val2 = BigDecimal.parse("$v2");

    var result = BigDecimal.parse("0");
    switch (op) {
      case "+":
        result = val1 + val2;
      case "-":
        result = val1 - val2;
      case "*":
        result = val1 * val2;
      case "/":
        result = val1.divide(val2, roundingMode: RoundingMode.UP, scale: 10);

      default:
        throw Exception("Invalid operator: $op");
    }
    return result.toString().replaceAll("-", _minusSafeOperator);
  }

  String applyMinusSafeOperator(String target) {
    return target.replaceAll(_minusSafeOperator, "-");
  }

  /// Avalia as operações basicas da formula, delegando o calculo de forma
  /// a respeitar a precedencia das operações matematicas.
  String evaluate(String formula, RegExpMatch match) {
    /// Identifica qual dos dois valores esta preenchido
    String getMatch(String? option1, String? option2) {
      String value = option1 ?? option2!;
      return applyMinusSafeOperator(value);
    }

    var val1 = getMatch(match.group(1), match.group(4));
    var op = getMatch(match.group(2), match.group(5));
    var val2 = getMatch(match.group(3), match.group(6));

    final result = evaluateFraction(double.parse(val1), op, double.parse(val2));

    final newFormula = updateFormula(match, result, formula);
    return resolveFormulaSteps(newFormula);
  }
}

List<(String, String)> getTestFormulas() {
  return [
    ("((45+(-36/22)) * (23-60)) - (24/-36)", "-1603.7878787879"),
    ("((-29/(46 - -10)) * (1 + -32)) - 31", "-14.9464285714"),
    ("(-58*-47) - ((-48 - -46) / -30) * -17", "2727.1333333333"),
    ("((-39*28)+59) - 25/20 * (7 - -20)", "-1066.75"),
    ("((-32 - (23 - 60)) * (36 / 4)) - 10", "35.0"),
    ("((-19+(-40/36)) * (26--16)) - (-57/1)", "-787.6666666667"),
    ("((-35+-42)-(-28+-34)) / (-15 - 39)", "0.2777777778"),
    ("((48 - -52) - 5) / (-26 + 39) * (-45 - 23)", "-496.9230769231"),
    ("((26*57)+37) - 25/-2 * (-44 - 7)", "881.5"),
    ("(10 - (-24 / (19 - -34))) * (45 + 60)", "1097.5471698113"),
    ("((-25*50) / (9 - 10)) + (-41 - -23)", "1232.0"),
    ("((-12+(-51/-47)) * (52--47)) - (36/-57)", "-1079.9428891377"),
    ("((-37 - (39 - -23)) * (10 / 36)) - 16", "-43.5"),
    ("(-58 - (-23 / (36 - -20))) * (37 + 28)", "-3743.3035714286"),
    ("((40 + 42) / -14) * (-22 - (36 / 51))", "132.9915966387"),
    ("((-58/22) - (30/-1)) * (-45 - -35)", "-273.6363636364"),
    ("((-55*-5) / (29 - 15)) + (-29 - 36)", "-45.3571428571"),
    ("((-14/59) - (-46/-32)) * (-51 - -10)", "68.6663135593"),
    ("((-48 - 31) - -8) / (49 + 50) * (-34 - 10)", "31.5555555556"),
    ("((15/(44 - -4)) * (-43 + 23)) - 45", "-51.25"),
    ("((-47*-60) / (1 - -15)) + (-35 - -59)", "200.25"),
    ("((14*-18)+-46) - -3/44 * (18 - -38)", "-294.1818181818"),
    ("(-2*-53) - ((-43 - -5) / -59) * -34", "127.8983050847"),
    ("(60 - (-19 / (-11 - -13))) * (-41 + 41)", "0.0"),
    ("(9*-2) - ((36 - -18) / -22) * -45", "-128.4545454545"),
    ("((12 - (-54 - -19)) * (32 / 19)) - 18", "61.1578947368"),
    ("((-37+(8/-32)) * (4-31)) - (4/26)", "1005.5961538462"),
    ("(58 - (-40*18)) - (59/18)", "774.7222222222"),
    ("(-33*27) - ((-3 - -13) / -38) * -24", "-897.3157894737"),
    ("((7 - 15) - -25) / (28 + -53) * (43 - 11)", "-21.76"),
    ("((-34 - (-33 - -1)) * (23 / -7)) - 23", "-16.4285714286"),
    ("((55+44)-(-37+-22)) / (55 - -44)", "1.595959596"),
    ("(40 - (-24*-40)) - (34/-48)", "-919.2916666667"),
    ("((-25/14) - (-56/-49)) * (-16 - -4)", "35.1428571429"),
    ("(-50 - (12 / (53 - -19))) * (-35 + 30)", "250.8333333333"),
    ("((-44/(-26 - 54)) * (-49 + -47)) - -34", "-18.8"),
    ("((34*56)+-52) - -51/-43 * (-17 - 47)", "1927.9069767442"),
    ("((12/45) * (-11 - -55)) + (5 * 0)", "11.7333333333"),
    ("(-28 - (-5 / (0 - -36))) * (20 + 54)", "-2061.7222222222"),
    ("(-30 - (-5*-54)) - (44/-4)", "-289.0"),
    ("((-31*22) / (40 - 45)) + (39 - 37)", "138.4"),
    ("((16/(60 - 29)) * (59 + 12)) - -29", "65.6451612903"),
    ("((-42/-15) - (50/5)) * (10 - -53)", "-453.6"),
    ("((-60/(18 - -48)) * (-1 + 7)) - 60", "-65.4545454545"),
    ("(-42 - (-45 / (10 - -46))) * (-60 + -51)", "4572.8035714286"),
    ("((-13+(-9/-38)) * (26--57)) - (-1/1)", "-1058.3421052632"),
    ("((-39 - (-19 - 40)) * (-9 / 58)) - -17", "13.8965517241"),
    ("((-57+(40/58)) * (51--5)) - (-16/-9)", "-3155.1570881226"),
    ("(10 - -43) * (34 - (-32/-46)) / (-46 + 49)", "588.3768115942"),
    ("((-3/-51) * (31 - 40)) + (-37 * 58)", "-2146.5294117647"),
    ("(-23 - -5) * (-7 - (-25/40)) / (23 + -52)", "-3.9568965517"),
    ("(-5 - (-39 / (3 - -18))) * (-16 + 46)", "-94.2857142857"),
    ("(-16*-35) - ((17 - -12) / 41) * -30", "581.2195121951"),
    ("((-23/(-39 - -59)) * (16 + -42)) - 51", "-21.1"),
    ("((14+7)-(-47+-37)) / (60 - -34)", "1.1170212766"),
    ("((27 + 14) / 46) * (-31 - (52 / -46))", "-26.6228733459"),
    ("((-3 - 59) - 10) / (-4 + 37) * (47 - 39)", "-17.4545454545"),
    ("((-49 - (-8 - 54)) * (-31 / -27)) - -50", "64.9259259259"),
    ("(-12*-14) - ((44 - -57) / 36) * -16", "212.8888888889"),
    ("((-49 + -18) / 51) * (31 - (-17 / -32))", "-40.0275735294"),
    ("((-46/47) * (-55 - 32)) + (5 * -3)", "70.1489361702"),
    ("(-37*-43) - ((56 - -6) / 1) * -11", "2273.0"),
    ("((1*8) / (10 - 54)) + (26 - -28)", "53.8181818182"),
    ("((46/(-48 - 40)) * (-11 + 20)) - -23", "18.2954545455"),
    ("((-7/(60 - 41)) * (16 + -48)) - 40", "-28.2105263158"),
    ("(22 - -23) * (-6 - (-51/-40)) / (-32 + -57)", "3.6783707865"),
    ("((51/-58) - (-12/3)) * (3 - -31)", "106.1034482759"),
    ("((15 - 53) - -10) / (-60 + -27) * (-41 - -21)", "-6.4367816092"),
    ("(45 - (-22*46)) - (19/-37)", "1057.5135135135"),
    ("((9/-5) * (-54 - -58)) + (-52 * -9)", "460.8"),
    ("((-20 - (-48 - 25)) * (-36 / 40)) - -22", "-25.7"),
    ("(-56*48) - ((-10 - 57) / 54) * 17", "-2666.9074074074"),
    ("((30+-9)-(31+16)) / (-32 - 24)", "0.4642857143"),
    ("((-3+-32)-(-11+34)) / (2 - 5)", "19.3333333333"),
    ("((-5/(-1 - -20)) * (38 + -49)) - -10", "12.8947368421"),
    ("((42*(-13-38)) + (-58/9)) - (-41--23)", "-2130.4444444444"),
    ("((-43*-45) / (-56 - -39)) + (-42 - -60)", "-95.8235294118"),
    ("((14+(33/9)) * (42-27)) - (34/-51)", "265.6666666667"),
    ("((59/45) - (49/19)) * (-27 - 14)", "51.9812865497"),
    ("((-2 + -8) / 16) * (5 - (-34 / -10))", "-1.0"),
    ("((20/-28) * (17 - -20)) + (48 * -1)", "-74.4285714286"),
    ("(-58 - -30) * (-46 - (2/-27)) / (8 + 22)", "42.8641975309"),
    ("(-48 - (-37*58)) - (6/16)", "2097.625"),
    ("(5 - (24 / (-5 - -52))) * (21 + 35)", "251.4042553191"),
    ("((-45*-47)+21) - -53/-38 * (32 - -34)", "2043.9473684211"),
    ("((-29/13) - (-29/-44)) * (-9 - 15)", "69.3566433566"),
    ("(-24 - (-56*-36)) - (9/-22)", "-2039.5909090909"),
    ("((34*46)+-17) - 14/51 * (19 - 49)", "1555.2352941176"),
    ("((-40*(-2--47)) + (38/29)) - (0--44)", "-1842.6896551724"),
    ("((53/53) * (53 - -59)) + (-9 * 19)", "-59.0"),
    ("((-49/34) * (-25 - -32)) + (-48 * -38)", "1813.9117647059"),
    ("(57*-7) - ((3 - -18) / 39) * 55", "-428.6153846154"),
    ("((-44*(-35-7)) + (48/24)) - (-12--14)", "1848.0"),
    ("(3*40) - ((41 - -31) / 14) * 42", "-96.0"),
    ("((-37 - (-56 - 58)) * (36 / 48)) - 12", "45.75"),
    ("((-49/(-19 - 18)) * (-58 + 3)) - 46", "-118.8378378378"),
    ("(34 - (57 / (-15 - -52))) * (33 + 53)", "2791.5135135135"),
    ("((40/-19) - (-50/25)) * (52 - 57)", "0.5263157895"),
    ("((-60*(-18-22)) + (40/48)) - (-4--29)", "2375.8333333333"),
    ("((57/(-16 - -33)) * (54 + 37)) - 51", "254.1176470588"),
    ("((-23*-18)+-20) - -57/-17 * (47 - 3)", "246.4705882353"),
    ("((60*(-16--48)) + (-58/44)) - (46-13)", "1885.6818181818"),
    ("(-1*16) - ((11 - 13) / -52) * 44", "-17.6923076923"),
    ("(32 - (-31*58)) - (-53/-34)", "1828.4411764706"),
    ("((40/56) * (-30 - -2)) + (35 * 55)", "1905.0"),
    ("((-55/(42 - -7)) * (41 + 56)) - -2", "-106.8775510204"),
    ("(27*60) - ((6 - 19) / 50) * -32", "1611.68"),
    ("(-40 - (4 / (-56 - -58))) * (-28 + 3)", "1050.0"),
    ("((19*-41) / (-23 - -46)) + (-9 - -50)", "7.1304347826"),
    ("((48 - (12 - 30)) * (-36 / 50)) - 36", "-83.52"),
    ("(-35 - (-1 / (-19 - 20))) * (27 + 32)", "-2066.5128205128"),
    ("((-1/-17) * (37 - 41)) + (2 * -56)", "-112.2352941176"),
    ("(-37 - (-56 / (32 - 19))) * (23 + 43)", "-2157.6923076923"),
    ("((6/47) - (-51/-3)) * (-17 - 57)", "1248.5531914894"),
    ("(-40 - 21) * (42 - (-35/-55)) / (29 + 40)", "-36.5678524374"),
    ("((-1+(12/26)) * (-47--3)) - (-23/10)", "25.9923076923"),
    ("((-37/-25) * (-30 - 10)) + (-11 * 51)", "-620.2"),
    ("((1*-35) / (-41 - 36)) + (45 - -18)", "63.4545454545"),
    ("((51+-60)-(-34+-3)) / (28 - -37)", "0.4307692308"),
    ("((36*-18) / (48 - 8)) + (-60 - -27)", "-49.2"),
    ("((49 - -4) - -17) / (43 + -8) * (-26 - -23)", "-6.0"),
    ("(59*33) - ((-32 - -30) / -5) * -14", "1952.6"),
    ("((-25 + -12) / -9) * (-47 - (10 / -52))", "-192.4316239316"),
    ("((57+34)-(-46+-2)) / (30 - -5)", "3.9714285714"),
    ("(-43 - (56*-30)) - (-45/15)", "1640.0"),
    ("((16*(39-35)) + (-34/3)) - (14-38)", "76.6666666667"),
    ("((42 - (50 - -60)) * (-5 / -55)) - 1", "-7.1818181818"),
    ("((39/(50 - -29)) * (-42 + 15)) - 40", "-53.3291139241"),
    ("(-2 - (-25 / (-16 - 41))) * (-23 + 57)", "-82.9122807018"),
    ("(-46*-8) - ((37 - 56) / 52) * 12", "372.3846153846"),
    ("((54 - (-53 - -10)) * (-42 / -59)) - 41", "28.0508474576"),
    ("(30 - (-57 / (29 - 39))) * (-44 + -14)", "-1409.4"),
    ("(23 - (-14 / (-25 - 41))) * (23 + -10)", "296.2424242424"),
    ("((-34*(7-54)) + (39/16)) - (58-31)", "1573.4375"),
    ("((-8/48) - (35/19)) * (-38 - 28)", "132.5789473684"),
    ("((-9*-11) / (14 - 15)) + (48 - 27)", "-78.0"),
    ("((-33*-24) / (-28 - -57)) + (43 - 58)", "12.3103448276"),
    ("(-43 - -13) * (-56 - (-6/6)) / (-8 + 19)", "150.0"),
    ("((45/36) * (11 - -31)) + (41 * -51)", "-2038.5"),
    ("(-6 - -2) * (-17 - (3/45)) / (-43 + 37)", "-11.3777777778"),
    ("((-53 + 38) / 5) * (17 - (0 / -13))", "-51.0"),
    ("((54 - (-37 - 57)) * (36 / 46)) - -39", "154.8260869565"),
    ("(-41 - (-42*2)) - (-5/23)", "43.2173913043"),
    ("((-13 - 55) - -18) / (-24 + 40) * (-7 - 26)", "103.125"),
    ("((22 - -8) - 39) / (57 + 25) * (48 - 20)", "-3.0731707317"),
    ("(52*-50) - ((-21 - 38) / -39) * 49", "-2674.1282051282"),
    ("((-15+19)-(3+43)) / (40 - 13)", "-1.5555555556"),
    ("((24 - (60 - -17)) * (22 / -31)) - 2", "35.6129032258"),
    ("((51+(-27/13)) * (48-21)) - (-19/-4)", "1316.1730769231"),
    ("((57 + 26) / 15) * (-27 - (20 / -11))", "-139.3393939394"),
    ("(-22 - 22) * (-60 - (-13/37)) / (53 + -12)", "64.0131839156"),
    ("((42/(-7 - 2)) * (-16 + 15)) - 51", "-46.3333333333"),
    ("(28 - (-52*11)) - (11/9)", "598.7777777778"),
    ("((-15*-25) / (-34 - -23)) + (-16 - -38)", "-12.0909090909"),
    ("((-26 + 51) / 12) * (48 - (-2 / -45))", "99.9074074074"),
    ("(36 - (-57*55)) - (14/-54)", "3171.2592592593"),
    ("((-5+(-36/-48)) * (-23--13)) - (9/-36)", "42.75"),
    ("((56/18) - (20/-16)) * (-55 - 34)", "-388.1388888889"),
    ("(37 - (38 / (7 - 59))) * (-26 + 36)", "377.3076923077"),
    ("((-17*22) / (57 - 56)) + (22 - -29)", "-323.0"),
    ("((59/36) - (28/-6)) * (-43 - -41)", "-12.6111111111"),
    ("((5*20)+-5) - -44/57 * (30 - -34)", "144.4035087719"),
    ("((-55+37)-(-33+-35)) / (-37 - 7)", "-1.1363636364"),
    ("((44*6)+-48) - 46/49 * (-40 - 50)", "300.4897959184"),
    ("((-49 - 4) - 6) / (-17 + -55) * (20 - -32)", "42.6111111111"),
    ("((4*19) / (-47 - 29)) + (-33 - 52)", "-86.0"),
    ("((18 - (-2 - -8)) * (52 / -43)) - 26", "-40.511627907"),
    ("((4 - (-47 - 54)) * (-27 / -51)) - -14", "69.5882352941"),
    ("(-38 - (55*29)) - (38/-3)", "-1620.3333333333"),
    ("((16 - -60) - -3) / (-9 + -19) * (-16 - 48)", "180.5714285714"),
    ("((41*22)+53) - 19/-23 * (19 - -51)", "1012.8260869565"),
    ("(-17 - 14) * (11 - (23/-58)) / (51 + 51)", "-3.4636578769"),
    ("((40*-55)+8) - 10/-56 * (12 - -51)", "-2180.75"),
    ("((13 - (-57 - -31)) * (-44 / 1)) - 37", "-1753.0"),
    ("((0*33)+45) - -10/33 * (-51 - -55)", "46.2121212121"),
    ("((50*(46-15)) + (-34/-58)) - (11-39)", "1578.5862068966"),
    ("((-22/27) - (-4/31)) * (58 - 11)", "-32.2317801673"),
    ("((-31/34) * (-59 - -38)) + (-60 * -31)", "1879.1470588235"),
    ("(-30 - (-29 / (27 - -3))) * (49 + 33)", "-2380.7333333333"),
    ("(-28 - (40 / (40 - -50))) * (-29 + 34)", "-142.2222222222"),
    ("((20/-51) - (-52/9)) * (20 - 36)", "-86.1699346405"),
    ("((39*(27--17)) + (-36/-47)) - (12-50)", "1754.7659574468"),
    ("(-18 - (-38 / (14 - -37))) * (31 + -43)", "207.0588235294"),
    ("((-31 + -25) / 37) * (-13 - (-1 / -46))", "19.7085781434"),
    ("(34 - 4) * (34 - (43/1)) / (16 + 15)", "-8.7096774194"),
    ("((-56*(-50--42)) + (59/33)) - (-44--34)", "459.7878787879"),
    ("((46 - (30 - -11)) * (53 / -48)) - -13", "7.4791666667"),
    ("((-16/57) * (39 - -42)) + (5 * -46)", "-252.7368421053"),
    ("(36*-54) - ((-52 - 56) / -32) * 27", "-2035.125"),
    ("(37 - 58) * (48 - (-5/-40)) / (30 + 49)", "-12.7262658228"),
    ("((-6/-51) - (29/-60)) * (4 - 60)", "-33.6549019608"),
    ("((22*26) / (-19 - 35)) + (50 - 50)", "-10.5925925926"),
    ("((-49*48)+-20) - 3/39 * (-23 - 23)", "-2368.4615384615"),
    ("((36+-40)-(12+-22)) / (43 - -39)", "0.0731707317"),
    ("((-26/(18 - 56)) * (-32 + -45)) - -27", "-25.6842105263"),
    ("((-33+9)-(-31+34)) / (49 - 30)", "-1.4210526316"),
    ("((28+28)-(21+-6)) / (33 - -59)", "0.4456521739"),
    ("((35 + -54) / -50) * (49 - (-49 / 27))", "19.3096296296"),
    ("(37 - (-32 / (3 - -50))) * (-21 + 35)", "526.4528301887"),
    ("((-22+-34)-(47+-38)) / (9 - -11)", "-3.25"),
    ("((45/40) - (8/-10)) * (-10 - 13)", "-44.275"),
    ("((-57+(-55/56)) * (21--33)) - (-52/-25)", "-3133.1157142857"),
    ("(19 - (56 / (-22 - -32))) * (16 + -19)", "-40.2"),
    ("((-34 - -14) - -14) / (39 + 57) * (33 - 47)", "0.875"),
    ("((55 + 6) / -28) * (35 - (-17 / 35))", "-77.3081632653"),
    ("((10 - (-1 - -16)) * (-41 / -15)) - 4", "-17.6666666667"),
    ("((-56+(54/-21)) * (8--20)) - (52/-47)", "-1638.8936170213"),
    ("(-51 - (34*-19)) - (-5/8)", "595.625"),
    ("((-11*-24) / (-23 - 50)) + (-12 - -45)", "29.3835616438"),
    ("((23+-32)-(26+4)) / (-43 - -34)", "4.3333333333"),
    ("((-28*52)+40) - 47/-57 * (-14 - -29)", "-1403.6315789474"),
    ("((-18 - -37) - 10) / (49 + -36) * (57 - -28)", "58.8461538462"),
    ("(30 - (25*-54)) - (26/-27)", "1380.962962963"),
    ("((-50*(55-20)) + (-43/-7)) - (-14--37)", "-1766.8571428571"),
    ("((53+-19)-(55+-44)) / (-15 - -6)", "-2.5555555556"),
    ("((-14+(44/8)) * (-55-21)) - (40/-3)", "659.3333333333"),
    ("((25*-45) / (30 - -59)) + (44 - 1)", "30.3595505618"),
    ("((22+(-38/-49)) * (23--13)) - (-37/51)", "820.643857543"),
    ("((18*-17) / (8 - -34)) + (-23 - -13)", "-17.2857142857"),
    ("((-3/(45 - -39)) * (6 + 14)) - -15", "14.2857142857"),
    ("((-9*58)+50) - -11/26 * (24 - -2)", "-461.0"),
    ("((-58/(45 - -12)) * (6 + -4)) - 54", "-56.0350877193"),
    ("(50 - (-43 / (41 - -42))) * (53 + 45)", "4950.7710843373"),
    ("(-47*-33) - ((49 - -20) / -20) * -50", "1378.5"),
    ("((36*-18)+-34) - 50/-10 * (7 - 11)", "-702.0"),
    ("((-12+-40)-(-3+-51)) / (51 - -58)", "0.0183486239"),
    ("(31*-47) - ((-29 - -15) / -45) * 42", "-1470.0666666667"),
    ("((46+-54)-(35+-23)) / (-28 - 37)", "0.3076923077"),
    ("(-10 - (-34 / (-50 - -51))) * (-23 + -32)", "-1320.0"),
    ("((16*20) / (25 - 31)) + (11 - -9)", "-33.3333333333"),
    ("((52 - (60 - -38)) * (-4 / -1)) - -36", "-148.0"),
    ("((-11 - (49 - 55)) * (26 / 20)) - 55", "-61.5"),
    ("((16/35) - (52/-34)) * (10 - -11)", "41.7176470588"),
    ("((-14 - 21) - 24) / (-55 + -41) * (37 - 41)", "-2.4583333333"),
    ("((-16/(-54 - 58)) * (51 + -53)) - 7", "-7.2857142857"),
    ("((-32*0) / (-50 - -2)) + (22 - 48)", "-26.0"),
    ("(11 - (9*-58)) - (-44/47)", "533.9361702128"),
    ("((7+38)-(-13+53)) / (52 - 16)", "0.1388888889"),
    ("((-20 - -22) - -23) / (34 + -30) * (7 - -1)", "50.0"),
    ("((13+(17/39)) * (-8--25)) - (3/45)", "228.3435897436"),
    ("((24/32) - (-7/-30)) * (24 - 57)", "-17.05"),
    ("(7*-26) - ((-51 - -4) / 42) * -33", "-218.9285714286"),
    ("((-16+-43)-(-28+-22)) / (-36 - -6)", "0.3"),
    ("((30 - (-46 - -2)) * (-51 / -5)) - 11", "743.8"),
    ("((20/-56) - (-27/42)) * (-31 - 33)", "-18.2857142857"),
    ("(-30 - (-15 / (-1 - 35))) * (40 + 56)", "-2920.0"),
    ("((24*52) / (57 - -42)) + (-13 - -12)", "11.6060606061"),
    ("(12 - 1) * (-5 - (-37/-23)) / (47 + 43)", "-0.8077294686"),
    ("((-10 - -10) - 3) / (-22 + 54) * (10 - -15)", "-2.34375"),
    ("((-2/(-42 - 27)) * (-19 + -6)) - -54", "53.2753623188"),
    ("((-55 - 59) - 7) / (-8 + 49) * (13 - -52)", "-191.8292682927"),
    ("((43/26) * (23 - -12)) + (1 * -13)", "44.8846153846"),
    ("((-7+(-15/-2)) * (11-27)) - (-60/24)", "-5.5"),
    ("((-33*(-56-49)) + (33/-52)) - (16--17)", "3431.3653846154"),
    ("((-54 - (45 - 2)) * (21 / 12)) - -4", "-165.75"),
    ("((47*-39) / (23 - 5)) + (9 - -14)", "-78.8333333333"),
    ("((60/-48) * (-22 - -13)) + (45 * 49)", "2216.25"),
    ("((-48*-27) / (14 - -52)) + (25 - -15)", "59.6363636364"),
    ("((-28/-59) - (33/-12)) * (39 - 53)", "-45.1440677966"),
    ("((-50/31) * (41 - -43)) + (-37 * 25)", "-1060.4838709677"),
    ("((13*-25) / (31 - 7)) + (-15 - -3)", "-25.5416666667"),
    ("(43 - (-5 / (-59 - -26))) * (5 + -36)", "-1328.303030303"),
    ("((-6/-4) - (-54/19)) * (15 - 38)", "-99.8684210526"),
    ("((54/-27) * (-1 - 45)) + (-38 * -13)", "586.0"),
    ("(15 - (-50 / (-20 - 25))) * (-9 + -34)", "-597.2222222222"),
    ("((18*35)+14) - 6/37 * (36 - 20)", "641.4054054054"),
    ("((44*57) / (-49 - -10)) + (21 - 38)", "-81.3076923077"),
    ("(-48 - (-10*37)) - (-59/-38)", "320.4473684211"),
    ("((16/(3 - 60)) * (16 + 29)) - 19", "-31.6315789474"),
    ("(12*-29) - ((48 - 48) / -31) * 53", "-348.0"),
    ("((-39 - (37 - -22)) * (11 / -20)) - 35", "18.9"),
    ("((38*(-20--18)) + (-44/3)) - (-6-1)", "-83.6666666667"),
    ("((59/(32 - 22)) * (31 + -43)) - -19", "-51.8"),
    ("((-30 - 43) - -29) / (1 + -53) * (19 - 41)", "-18.6153846154"),
    ("((-11+-30)-(-58+-2)) / (19 - 53)", "-0.5588235294"),
    ("((21 + 30) / 13) * (-39 - (-35 / -2))", "-221.6538461538"),
    ("((59/-45) - (-58/-11)) * (12 - -2)", "-92.1737373737"),
    ("((-30 - 24) - -30) / (22 + 48) * (-34 - 41)", "25.7142857143"),
    ("(44 - -30) * (-30 - (-16/60)) / (-42 + 52)", "-220.0266666667"),
    ("((-21+(18/22)) * (7-8)) - (-20/-42)", "19.7056277056"),
    ("(43 - 15) * (-38 - (11/34)) / (-50 + 23)", "39.74291939"),
    ("((37 - -15) - -49) / (47 + -31) * (-21 - 16)", "-233.5625"),
    ("(-41*37) - ((-11 - -17) / 57) * -2", "-1516.7894736842"),
    ("((-49/(24 - -59)) * (-45 + 2)) - -31", "56.3855421687"),
    ("(43 - -47) * (28 - (34/-46)) / (-27 + -49)", "-34.033180778"),
    ("(32*9) - ((-50 - 36) / -11) * 52", "-118.5454545455"),
    ("(-32 - -2) * (-60 - (20/-23)) / (-14 + -11)", "-70.9565217391"),
    ("(-11*-14) - ((-36 - -8) / -40) * -52", "190.4"),
    ("((4/(53 - 39)) * (-1 + 10)) - -6", "8.5714285714"),
    ("((58 - -8) - -20) / (46 + 2) * (-51 - -51)", "0.0"),
    ("((-56/(-34 - -32)) * (44 + 1)) - 48", "1212.0"),
    ("(12*-38) - ((-54 - -19) / 51) * -55", "-493.7450980392"),
    ("((28+32)-(-10+-53)) / (23 - 59)", "-3.4166666667"),
    ("(42*33) - ((-56 - 23) / -60) * 20", "1359.6666666667"),
    ("(-21 - (39 / (-5 - -27))) * (-53 + 46)", "159.4090909091"),
    ("(-7 - (-19*58)) - (49/50)", "1094.02"),
    ("((9*-34)+16) - -3/31 * (-26 - 29)", "-295.3225806452"),
    ("((-21/46) * (43 - 60)) + (37 * 17)", "636.7608695652"),
    ("((45*8)+31) - 15/34 * (34 - 54)", "399.8235294118"),
    ("((30+(19/2)) * (33--14)) - (-6/43)", "1856.6395348837"),
    ("((-11*(5-13)) + (27/-16)) - (-57--54)", "89.3125"),
    ("((9+(10/-44)) * (58-15)) - (-58/-6)", "367.5606060606"),
    ("((-28 - 46) - -8) / (60 + -55) * (11 - 24)", "171.6"),
    ("(58 - (5 / (25 - -27))) * (-50 + 36)", "-810.6538461538"),
    ("(35 - 17) * (-4 - (-42/7)) / (-9 + 29)", "1.8"),
    ("(9 - 4) * (-49 - (48/-40)) / (46 + -2)", "-5.4318181818"),
    ("((29*(-19-60)) + (17/31)) - (-30-4)", "-2256.4516129032"),
    ("((-11+52)-(11+8)) / (-3 - -36)", "0.6666666667"),
    ("(-52*12) - ((11 - 4) / -52) * 21", "-621.1730769231"),
    ("(34 - (-31 / (-52 - 30))) * (-47 + -42)", "-2992.3536585366"),
    ("((17*(28--24)) + (44/-48)) - (41--21)", "821.0833333333"),
    ("((39 - (-52 - -7)) * (-31 / 12)) - 58", "-275.0"),
    ("((-13 - 55) - 52) / (-18 + -50) * (29 - -48)", "135.8823529412"),
    ("((-9 - -30) - -26) / (-47 + -24) * (16 - 46)", "19.8591549296"),
    ("((-24+(21/59)) * (-55-57)) - (-55/-49)", "2647.0131442407"),
    ("((-5+(48/-3)) * (-52--9)) - (51/21)", "900.5714285714"),
    ("((12/-31) * (-5 - -50)) + (-8 * 46)", "-385.4193548387"),
    ("((16*-51) / (21 - -29)) + (8 - 47)", "-55.32"),
    ("((-43/-40) - (42/-10)) * (-18 - 8)", "-137.15"),
    ("((8/-11) - (18/-43)) * (6 - 40)", "10.4947145877"),
    ("(-45 - (-46 / (-53 - 46))) * (53 + -5)", "-2182.303030303"),
    ("((46*(-4--51)) + (5/-35)) - (41-14)", "2134.8571428571"),
    ("((-51 - -23) - -48) / (-17 + 24) * (44 - 44)", "0.0"),
    ("(39*-37) - ((8 - -2) / -52) * -55", "-1453.5769230769"),
    ("((30/(48 - -45)) * (-33 + -59)) - 28", "-57.6774193548"),
    ("((-49/38) - (49/40)) * (-18 - 31)", "123.2092105263"),
    ("((-31/-53) - (37/12)) * (-59 - 59)", "294.8144654088"),
    ("(-34 - -46) * (58 - (40/23)) / (-9 + -53)", "-10.889200561"),
    ("((13*(-26--48)) + (21/13)) - (60--19)", "208.6153846154"),
    ("((31*(-42--16)) + (7/29)) - (-17--4)", "-792.7586206897"),
    ("(45 - (54*-59)) - (41/-18)", "3233.2777777778"),
    ("(3 - (48 / (19 - -8))) * (-56 + 22)", "-41.5555555556"),
    ("((26*43) / (16 - -7)) + (-27 - 52)", "-30.3913043478"),
    ("((-25 + 28) / -7) * (-9 - (49 / -14))", "2.3571428571"),
    ("((35/28) - (-39/29)) * (22 - -8)", "77.8448275862"),
    ("((22 - (60 - -7)) * (51 / 56)) - 23", "-63.9821428571"),
    ("((-10*(28-18)) + (44/-19)) - (58-59)", "-101.3157894737"),
    ("((28/(43 - -41)) * (60 + -2)) - -1", "20.3333333333"),
    ("((-28 - -26) - 30) / (-58 + 51) * (8 - 17)", "-41.1428571429"),
    ("((28+(27/-5)) * (0-17)) - (5/-11)", "-383.7454545455"),
    ("((28+3)-(-13+-33)) / (-33 - -41)", "9.625"),
    ("(1 - (19 / (-9 - 58))) * (-30 + 42)", "15.4029850746"),
    ("((3 + 7) / -25) * (-13 - (4 / 28))", "5.2571428571"),
    ("(9*-18) - ((-28 - 37) / -53) * -24", "-132.5660377358"),
    ("((26*-50) / (45 - 39)) + (-16 - -53)", "-179.6666666667"),
    ("((-5 - (-21 - 17)) * (16 / -16)) - 53", "-86.0"),
    ("(7*-24) - ((-24 - 50) / 48) * 15", "-144.875"),
    ("(45 - 12) * (-15 - (-4/-13)) / (60 + -46)", "-36.0824175824"),
    ("((46/5) * (58 - 16)) + (12 * -34)", "-21.6"),
    ("((-40 - (-40 - -34)) * (39 / 39)) - 14", "-48.0"),
    ("((-9*-35)+-34) - -44/-17 * (58 - -33)", "45.4705882353"),
    ("((51*48) / (-55 - 32)) + (5 - -41)", "17.8620689655"),
    ("((-35/(-36 - -54)) * (-53 + 22)) - 7", "53.2777777778"),
    ("((-16 - (38 - -14)) * (-17 / 58)) - -9", "28.9310344828"),
    ("((-11/-16) * (25 - 1)) + (36 * -44)", "-1567.5"),
    ("((42 + -21) / 52) * (40 - (46 / 15))", "14.9153846154"),
    ("((3/-13) * (27 - -42)) + (-5 * 35)", "-190.9230769231"),
    ("(57*-9) - ((-30 - 57) / 31) * 28", "-434.4193548387"),
    ("((-36/41) * (-57 - 11)) + (-34 * -57)", "1997.7073170732"),
    ("((-2 - -59) - -17) / (-49 + -32) * (34 - 32)", "-1.8271604938"),
    ("((36 + 22) / 41) * (34 - (-39 / 28))", "50.0679442509"),
    ("((34+(-19/18)) * (33--43)) - (21/12)", "2502.0277777778"),
    ("((-38*39) / (47 - -59)) + (37 - -22)", "45.0188679245"),
    ("((35*-44)+10) - -27/24 * (-20 - 3)", "-1555.875"),
    ("((-39+-30)-(44+-35)) / (-58 - 24)", "0.9512195122"),
    ("((-36/-54) * (-14 - -28)) + (-37 * -36)", "1341.3333333333"),
    ("(23 - (39*-2)) - (38/29)", "99.6896551724"),
    ("(16*28) - ((-19 - 3) / 21) * 25", "474.1904761905"),
    ("((18/(8 - -3)) * (-38 + 54)) - 17", "9.1818181818"),
    ("((-23 - (37 - 55)) * (9 / -35)) - -5", "6.2857142857"),
    ("(60 - 46) * (-44 - (-12/-50)) / (-22 + 9)", "47.6430769231"),
    ("((57*(37--40)) + (-13/-52)) - (32--52)", "4305.25"),
    ("((-38/(34 - -3)) * (-32 + 33)) - -11", "9.972972973"),
    ("((7 + 9) / 31) * (-24 - (8 / 3))", "-13.7634408602"),
    ("(-3*48) - ((53 - 54) / -60) * 38", "-144.6333333333"),
    ("((-54+(-58/-43)) * (-45--36)) - (55/-11)", "478.8604651163"),
    ("(-34 - (29 / (5 - -48))) * (34 + 45)", "-2729.2264150943"),
    ("((-15*-16)+-16) - 36/57 * (-4 - 58)", "263.1578947368"),
    ("((20 - (59 - -10)) * (41 / 9)) - -5", "-218.2222222222"),
    ("((22*31)+-25) - -51/-27 * (34 - 45)", "677.7777777778"),
    ("((-9/-57) - (-10/33)) * (-60 - 41)", "-46.5534290271"),
    ("((-20 - (-26 - -4)) * (-8 / -25)) - 32", "-31.36"),
    ("((-21/13) * (-25 - 14)) + (-18 * -17)", "369.0"),
    ("((-52+44)-(21+49)) / (25 - 12)", "-6.0"),
    ("((-30+(-59/-29)) * (-25-5)) - (1/-51)", "838.9851250845"),
    ("((-34*(24--16)) + (-21/52)) - (21--4)", "-1385.4038461538"),
    ("((52/26) * (15 - -16)) + (-9 * -44)", "458.0"),
    ("((53/(-56 - -7)) * (20 + 28)) - -28", "-23.9183673469"),
    ("((21 + 60) / 13) * (21 - (-14 / -24))", "127.2115384615"),
    ("((54+-1)-(51+46)) / (33 - 35)", "22.0"),
    ("((-34 - -5) - 49) / (22 + 32) * (-49 - 40)", "128.5555555556"),
    ("(-22 - (33 / (39 - 24))) * (23 + 15)", "-919.6"),
    ("((44 - -60) - 11) / (-53 + -32) * (-18 - 12)", "32.8235294118"),
    ("((32+35)-(44+-26)) / (-43 - -1)", "-1.1666666667"),
    ("((-31 + -18) / -47) * (-43 - (-53 / -42))", "-46.1453900709"),
    ("((-29+(-6/8)) * (18--58)) - (-55/-25)", "-2263.2"),
    ("((44*41)+-42) - 23/7 * (34 - 41)", "1785.0"),
    ("((-45+(-46/44)) * (22--23)) - (12/-53)", "-2071.8190394511"),
    ("((-24+(-11/-18)) * (21-57)) - (-26/13)", "844.0"),
    ("((-4 - 7) - -1) / (6 + 8) * (-8 - -58)", "-35.7142857143"),
    ("((-32 + -14) / -40) * (11 - (60 / 34))", "10.6205882353"),
    ("((-8+(-50/-49)) * (38--19)) - (-34/-36)", "-398.7811791383"),
    ("((-17/-31) - (24/-52)) * (48 - 28)", "20.1985111663"),
    ("(-33 - 59) * (-30 - (43/-55)) / (-10 + 2)", "-336.0090909091"),
    ("((-21*43)+38) - 29/46 * (-18 - -3)", "-855.5434782609"),
    ("((-20/-57) * (-57 - -54)) + (42 * -37)", "-1555.0526315789"),
    ("((-9+(-56/-53)) * (-33-7)) - (32/57)", "317.1744455478"),
    ("(-55*58) - ((3 - -49) / -40) * -57", "-3264.1"),
    ("((-58+20)-(-46+-15)) / (49 - -25)", "0.3108108108"),
    ("((58*-55)+-10) - 22/15 * (20 - -4)", "-3235.2"),
    ("((26*38)+45) - 50/-27 * (15 - -46)", "1145.962962963"),
    ("((-5/5) - (2/-57)) * (-56 - -28)", "27.0175438596"),
    ("(-11*41) - ((-4 - -1) / -44) * 30", "-453.0454545455"),
    ("((30/(32 - 34)) * (-40 + 41)) - 54", "-69.0"),
    ("((5/(55 - -44)) * (-3 + -27)) - 6", "-7.5151515152"),
    ("(39 - (-38 / (-41 - 13))) * (-54 + 37)", "-651.037037037"),
    ("((-14+(59/-53)) * (-30-5)) - (42/43)", "527.9855199649"),
    ("((-48 - -55) - -21) / (-53 + 10) * (8 - -36)", "-28.6511627907"),
    ("((60*(-24-40)) + (-38/-31)) - (42--22)", "-3902.7741935484"),
    ("((-46 + -56) / -2) * (48 - (19 / 49))", "2428.2244897959"),
    ("((-7 - (19 - -8)) * (-19 / -18)) - 58", "-93.8888888889"),
    ("((-18*48) / (59 - 26)) + (32 - 10)", "-4.1818181818"),
    ("(-57 - (51*42)) - (-19/41)", "-2198.5365853659"),
    ("((34*58) / (-45 - 4)) + (35 - -2)", "-3.2448979592"),
    ("((-14/-50) * (-55 - -20)) + (25 * 49)", "1215.2"),
    ("(-30 - -58) * (57 - (-38/54)) / (-50 + 10)", "-40.3925925926"),
    ("((19*(28--45)) + (-7/40)) - (48-26)", "1364.825"),
    ("((-30*31)+22) - -27/53 * (39 - -19)", "-878.4528301887"),
    ("((-28 + -43) / -7) * (-51 - (44 / -40))", "-506.1285714286"),
    ("((59 - (-17 - 24)) * (-26 / 12)) - -28", "-188.6666666667"),
    ("((-9*22) / (1 - 57)) + (27 - -59)", "89.5357142857"),
    ("((34/-14) - (-16/54)) * (11 - 12)", "2.1322751323"),
    ("(48 - (-9*-8)) - (12/-58)", "-23.7931034483"),
    ("((-4+16)-(6+-54)) / (-1 - -6)", "12.0"),
    ("(-48 - (15*6)) - (-42/52)", "-137.1923076923"),
    ("(-51 - (15*10)) - (59/29)", "-203.0344827586"),
    ("((51 - (17 - -32)) * (12 / 39)) - 42", "-41.3846153846"),
    ("((21/-15) - (-11/-50)) * (-31 - 46)", "124.74"),
    ("((40/13) * (13 - -39)) + (48 * 4)", "352.0"),
    ("((-52*-17) / (-54 - -34)) + (48 - -36)", "39.8"),
    ("((52/60) - (-9/-32)) * (25 - 49)", "-14.05"),
    ("(-20 - (54 / (12 - 47))) * (58 + 22)", "-1476.5714285714"),
    ("((-53/(17 - 5)) * (-35 + -40)) - -41", "372.25"),
    ("((57*(-41--9)) + (11/-11)) - (55-48)", "-1832.0"),
    ("(27*20) - ((23 - -51) / 14) * 8", "497.7142857143"),
    ("((15/30) * (-50 - -45)) + (52 * -33)", "-1718.5"),
    ("(-15 - (52*49)) - (-36/-4)", "-2572.0"),
    ("(-6 - (-51*18)) - (-31/-9)", "908.5555555556"),
    ("((-3 - 46) - 31) / (-48 + 54) * (-48 - 58)", "1413.3333333333"),
    ("(29 - 54) * (32 - (46/-4)) / (-25 + -34)", "18.4322033898"),
    ("((-33*(-18--27)) + (-58/34)) - (9-21)", "-286.7058823529"),
    ("((-52*(-59-49)) + (-59/-54)) - (-60--21)", "5656.0925925926"),
    ("((-24/40) - (5/-5)) * (-50 - 36)", "-34.4"),
    ("(16 - -10) * (-21 - (11/-41)) / (-20 + -2)", "24.5011086475"),
    ("(41 - -28) * (-21 - (-45/-37)) / (-17 + 5)", "127.7432432432"),
    ("(-60 - (-42*-17)) - (18/-10)", "-772.2"),
    ("(14*30) - ((42 - 41) / 49) * -48", "420.9795918367"),
    ("(39 - -20) * (-38 - (39/-39)) / (22 + -24)", "1091.5"),
    ("((8/-36) - (41/34)) * (-24 - -45)", "-29.9901960784"),
    ("((-1/-40) - (12/-58)) * (-24 - 25)", "-11.3629310345"),
    ("((-8*42)+53) - 45/44 * (-50 - -19)", "-251.2954545455"),
    ("((24 - -43) - -39) / (-18 + 29) * (24 - 48)", "-231.2727272727"),
    ("((15*51)+-24) - -40/36 * (56 - -31)", "837.6666666667"),
    ("((-49/17) - (-8/-42)) * (-20 - 25)", "138.2773109244"),
    ("((27 + -8) / -37) * (43 - (56 / -16))", "-23.8783783784"),
    ("((-48 - (11 - -7)) * (-44 / 40)) - 59", "13.6"),
    ("(39*-23) - ((19 - 47) / 54) * -4", "-899.0740740741"),
    ("((11+-27)-(18+12)) / (-2 - 36)", "1.2105263158"),
    ("(34 - (-21*-31)) - (-11/14)", "-616.2142857143"),
    ("((-24+25)-(25+56)) / (-33 - 26)", "1.3559322034"),
    ("(7 - -32) * (38 - (51/-22)) / (23 + 50)", "21.5398505604"),
    ("(-49 - (-45*6)) - (-7/39)", "221.1794871795"),
    ("((-57/(-1 - 20)) * (-38 + -32)) - -41", "-149.0"),
    ("((-55+-25)-(-21+57)) / (-11 - -40)", "-4.0"),
    ("(-10*11) - ((26 - -23) / 44) * 59", "-175.7045454545"),
    ("(-31*-32) - ((44 - -33) / -57) * 1", "993.350877193"),
    ("(39 - (-40 / (33 - -6))) * (34 + -4)", "1200.7692307692"),
    ("((58/-25) - (12/36)) * (-32 - 27)", "156.5466666667"),
    ("(-58 - (55 / (-41 - 3))) * (-2 + -31)", "1872.75"),
    ("((-23+(-60/23)) * (-44-16)) - (-12/55)", "1536.7399209486"),
    ("(-38*-42) - ((59 - -55) / -35) * -53", "1423.3714285714"),
    ("((41 - (-28 - 47)) * (47 / -44)) - -5", "-118.9090909091"),
    ("((-2 - (14 - 31)) * (42 / 13)) - 26", "22.4615384615"),
    ("((-55/(45 - 33)) * (-18 + -32)) - -46", "275.1666666667"),
    ("((-39*46)+19) - -38/-21 * (-21 - -28)", "-1787.6666666667"),
    ("(-33*32) - ((27 - -12) / -5) * 44", "-712.8"),
    ("((20/(-34 - -30)) * (1 + -28)) - 55", "80.0"),
    ("(56 - (-4*-10)) - (-48/21)", "18.2857142857"),
    ("((48 - -21) - 47) / (25 + -56) * (44 - 47)", "2.1290322581"),
    ("(-21 - -15) * (46 - (-49/-17)) / (30 + 49)", "-3.2747580045"),
    ("((-7 - (51 - 45)) * (-60 / 15)) - -16", "68.0"),
    ("((-31 + 23) / 49) * (13 - (-52 / -10))", "-1.2734693878"),
    ("(-4*47) - ((-27 - -37) / 41) * 31", "-195.5609756098"),
    ("((-23 - -25) - -55) / (40 + 34) * (-5 - 42)", "-36.2027027027"),
    ("(-15 - 45) * (-26 - (48/-23)) / (54 + 8)", "23.141654979"),
    ("((-18+-53)-(36+46)) / (-28 - 29)", "2.6842105263"),
    ("(-34 - (-57 / (-16 - -34))) * (26 + -29)", "92.5"),
    ("((-32*40)+-26) - -21/-39 * (-13 - 51)", "-1271.5384615385"),
    ("((-53*37) / (41 - 32)) + (-32 - -47)", "-202.8888888889"),
    ("((-14 - 52) - -17) / (-48 + -16) * (-13 - 24)", "-28.328125"),
  ];
}

extension Let<T> on T {
  R let<R>(R Function(T) func) => func(this);
}
